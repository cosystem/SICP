#lang sicp

;; ---- helper functions ----;
(define (square x)
  (* x x))

;; ---- define put and get ----;
(define global-array '())

(define (make-entry k v) (list k v))
(define (key entry) (car entry))
(define (value entry) (cadr entry))

(define (put op type item)
  (define (put-helper k array)
    (cond ((null? array) (list(make-entry k item)))
          ((equal? (key (car array)) k) array)
          (else (cons (car array) (put-helper k (cdr array))))))
  (set! global-array (put-helper (list op type) global-array)))

(define (get op type)
  (define (get-helper k array)
    (cond ((null? array) #f)
          ((equal? (key (car array)) k) (value (car array)))
          (else (get-helper k (cdr array)))))
  (get-helper (list op type) global-array))

; ---- define attach tag ----;
(define (attach-tag type-tag contents)
  (cond ((eq? type-tag 'scheme-number) contents)
        (else (cons type-tag contents))))

(define (type-tag datum)
  (cond ((pair? datum) (car datum))
        ((number? datum) 'scheme-number)
        (else (error "Bad tagged datum -- TYPE-TAG" datum))))

(define (contents datum)
  (cond ((pair? datum) (cdr datum))
        ((number? datum) datum)
        ((error "Bad tagged datum -- CONTENTS" datum))))

(define (magnitude-1 z) (apply-generic 'magnitude-1 z))
(define (real-part-1 z) (apply-generic 'real-part-1 z))
(define (imag-part-1 z) (apply-generic 'imag-part-1 z))
(define (angle-1 z) (apply-generic 'angle-1 z))
(define (equ? z1 z2) (apply-generic 'equ? z1 z2))
(define (=zero? x) (apply-generic '=zero? x))

;; ---- scheme-number package 
(define (install-scheme-number-package)
  (define (tag x)
    (attach-tag 'scheme-number x))
  (put 'add '(scheme-number scheme-number)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
       (lambda (x y) (tag (- x y))))
  (put 'div '(scheme-number scheme-number)
       (lambda (x y) (tag (/ x y))))
  (put 'mul '(scheme-number scheme-number)
       (lambda (x y) (tag (* x y))))
  (put 'make 'scheme-number (lambda (x) (tag x)))
  ; add equal for scheme-number to look-up table
  (put 'equ? '(scheme-number scheme-number) =)
  ; add zero test
  (put '=zero? '(scheme-number) (lambda (x) (= x 0)))
  'done)


; test scheme number package
;(install-scheme-number-package)
;(define (make-scheme-number n)
;  ((get 'make 'scheme-number) n))
;
;(define x (make-scheme-number 5))
;
;(display (type-tag x))
;(newline)
;(display (contents x))

;; ---- rational number package
(define (install-rational-package)
  ;; internal procedures
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))
  (define (equ-rational x y)
    (equ? (numer x) (numer y)) (equ? (denom x) (denom y)))
  (define (=zero-rational x)
    (and (=zero? (numer x)) (not (=zero? (denom x)))))
  ;; interface to rest of the system
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational)
       (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
       (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
       (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
       (lambda (x y) (tag (div-rat x y))))
  (put 'make 'rational
       (lambda (n d) (tag (make-rat n d))))
  (put 'equ? '(rational rational) equ-rational)
  (put '=zero? '(rational) =zero-rational)
  'done
  )

;; ---- complex number package

(define (install-complex-package)
  ;; imported procedures from rectangular and polar packages)
  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang 'polar) r a))
  ;; internal procedures
  (define (add-complex z1 z2)
    (make-from-real-imag (+ (real-part-1 z1) (real-part-1 z2))
                         (+ (imag-part-1 z1) (imag-part-1 z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (- (real-part-1 z1) (real-part-1 z2))
                         (- (imag-part-1 z1) (imag-part-1 z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (* (magnitude-1 z1) (magnitude-1 z2))
                       (+ (angle-1 z1) (angle-1 z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (/ (magnitude-1 z1) (magnitude-1 z2))
                       (- (angle-1 z1) (angle-1 z2))))
  (define (equ-complex z1 z2)
    (and (equ? (real-part-1 z1) (real-part-1 z2)) (equ? (imag-part-1 z1) (imag-part-1 z2))))
  (define (=zero-complex z)
    (and (=zero? (real-part-1 z)) (=zero? (imag-part-1 z))))
  ;; interface to rest of the system
  (define (tag z) (attach-tag 'complex z))
  (put 'add '(complex complex)
       (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put 'sub '(complex complex)
       (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put 'mul '(complex complex)
       (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put 'div '(complex complex)
       (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put 'make-from-real-imag 'complex
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'complex
       (lambda (r a) (tag (make-from-mag-ang r a))))
  (put 'real-part-1 '(complex) real-part-1)
  (put 'magnitude-1 '(complex) magnitude-1)
  (put 'equ? '(complex complex) equ-complex)
  (put '=zero? '(complex) =zero-complex)
  'done)

;; ---- rectangular number package
(define (install-rectangular-package)
  ;; internal procedures
  (define (real-part-1 z) (car z))
  (define (imag-part-1 z) (cdr z))
  (define (make-from-real-imag x y) (cons x y))
  (define (magnitude-1 z)
    (sqrt (+ (square (real-part-1 z))
             (square (imag-part-1 z)))))
  (define (angle-1 z)
    (atan (imag-part-1 z) (real-part-1 z)))
  (define (make-from-mag-ang r a) 
    (cons (* r (cos a)) (* r (sin a))))
  ;; interface to the rest of the system
  (define (tag x) (attach-tag 'rectangular x))
  (put 'real-part-1 '(rectangular) real-part-1)
  (put 'imag-part-1 '(rectangular) imag-part-1)
  (put 'magnitude-1 '(rectangular) magnitude-1)
  (put 'angle-1 '(rectangular) angle-1)
  (put 'make-from-real-imag 'rectangular 
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'rectangular 
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)

;; ---- polor number package
(define (install-polar-package)
  ;; internal procedures
  (define (magnitude-1 z) (car z))
  (define (angle-1 z) (cdr z))
  (define (make-from-mag-ang r a) (cons r a))
  (define (real-part-1 z)
    (* (magnitude-1 z) (cos (angle-1 z))))
  (define (imag-part-1 z)
    (* (magnitude-1 z) (sin (angle-1 z))))
  (define (make-from-real-imag x y) 
    (cons (sqrt (+ (square x) (square y)))
          (atan y x)))
  ;; interface to the rest of the system
  (define (tag x) (attach-tag 'polar x))
  (put 'real-part-1 '(polar) real-part-1)
  (put 'imag-part-1 '(polar) imag-part-1)
  (put 'magnitude-1 '(polar) magnitude-1)
  (put 'angle-1 '(polar) angle-1)
  (put 'make-from-real-imag 'polar
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'polar 
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)

(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (error
           "No method for these types -- APPLY-GENERIC"
           (list op type-tags))))))

(define (make-complex-from-real-imag x y)
  ((get 'make-from-real-imag 'complex) x y))

(define (make-complex-from-mag-ang r a)
  ((get 'make-from-mag-ang 'complex) r a))

(install-complex-package)
(install-polar-package)
(install-rectangular-package)
(install-scheme-number-package)

(define x ((get 'make-from-real-imag 'rectangular) 3 4))
(define y ((get 'make-from-mag-ang 'polar) 6 2))
(define z1 (make-complex-from-real-imag 3 4))
(define z2 (make-complex-from-real-imag 4 3))

(real-part-1 z1)
(magnitude-1 z1)
(equ? z1 z2)

; test with rational number
(install-rational-package)
(define (make-rational x y) ((get 'make 'rational) x y))
(define w1 (make-complex-from-real-imag (make-rational 5 6) (make-rational 7 9)))
(define w2 (make-complex-from-real-imag (make-rational 5 6) (make-rational 7 9)))
(define w3 (make-complex-from-real-imag (make-rational 0 6) (make-rational 0 9)))
(define r1 (make-rational 0 8))
(equ? w1 w2)
(newline)
(=zero? 0)
(=zero? r1)
(=zero? w3)
